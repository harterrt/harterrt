<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.harterrt.com - 2024</title><link href="https://blog.harterrt.com/" rel="alternate"></link><link href="https://blog.harterrt.com/feeds/2024.atom.xml" rel="self"></link><id>https://blog.harterrt.com/</id><updated>2024-12-07T17:24:00-08:00</updated><entry><title>Humidity and ratios</title><link href="https://blog.harterrt.com/humidity.html" rel="alternate"></link><published>2024-12-07T17:24:00-08:00</published><updated>2024-12-07T17:24:00-08:00</updated><author><name>Ryan T. Harter</name></author><id>tag:blog.harterrt.com,2024-12-07:/humidity.html</id><summary type="html">&lt;p&gt;My house gets super dry in the winter and I didn't understand why.&lt;/p&gt;
&lt;p&gt;My weather station says it's drier inside than outside,
which didn't make a ton of sense. 
I'm cooking, and sweating, and showering inside.
It should be &lt;em&gt;more&lt;/em&gt; humid.&lt;/p&gt;
&lt;p&gt;I had a suspicion that my forced hot air …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My house gets super dry in the winter and I didn't understand why.&lt;/p&gt;
&lt;p&gt;My weather station says it's drier inside than outside,
which didn't make a ton of sense. 
I'm cooking, and sweating, and showering inside.
It should be &lt;em&gt;more&lt;/em&gt; humid.&lt;/p&gt;
&lt;p&gt;I had a suspicion that my forced hot air system was to blame,
but I didn't understand the mechanism.
&lt;em&gt;Cooling&lt;/em&gt; air makes it drier, but &lt;em&gt;heating&lt;/em&gt; shouldn't remove any water.
Like - I know my A/C has a drain on it, but my furnace definitely doesn't.&lt;/p&gt;
&lt;h1 id="relative-humidity"&gt;&lt;em&gt;Relative&lt;/em&gt; humidity&lt;/h1&gt;
&lt;p&gt;As it turns out, I didn't understand my metric.
My weather station reports &lt;em&gt;relative&lt;/em&gt; humidity,
and I guess I always just ignored the "relative" part?&lt;/p&gt;
&lt;!-- 
I assumed 60% humidity meant that there was more water in the air 
than at 30% humidity,
which is not necessarily true.
--&gt;

&lt;p&gt;Relative humidity is how close we are to the maximum humidity
&lt;em&gt;at a given temperature&lt;/em&gt;.
Hot air can hold a lot of water, cold air holds very little water.
The difference is huge - air at 68°F can hold ~4x more water than at 32°F
(at least that's what I understand from skimming this 
&lt;a href="https://en.wikipedia.org/wiki/Vapour_pressure_of_water"&gt;wikipedia article&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So when I opened my windows to let in the 60% humidity 32° air,
the relative humidity dropped to 15% after heating it to 68°.
Mystery solved.&lt;/p&gt;
&lt;h1 id="beware-shifting-denominators"&gt;Beware shifting denominators&lt;/h1&gt;
&lt;p&gt;When a ratio moves, people tend to think it's because the numerator shifted.
It can be very misleading when the denominator changes instead.&lt;/p&gt;
&lt;p&gt;For example: 
the percent of users buying a product after visiting your store
increases by from 25% to 50%! 
That's great! Unless you just lost a bunch of traffic to your store:&lt;/p&gt;
&lt;style&gt;
    table {
            border-collapse: collapse; /* Removes extra spacing between cells */
            margin: 20px 0;
            font-size: 16px;
      text-align: right;
    }
    th, td {
            padding: 10px;
            border: 1px solid #ddd; /* Adds a light border */
    }
    th {
            background-color: #f4f4f4; /* Adds a subtle background for headers */
            font-weight: bold;
    }
    tr:nth-child(even) {
            background-color: #f9f9f9; /* Alternating row colors */
    }
    tr:hover {
            background-color: #f1f1f1; /* Highlight rows on hover */
    }
  th:first-child, td:first-child {
      text-align: left; /* Align the first column to the left */
  }
&lt;/style&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt; Date &lt;/th&gt;&lt;th&gt; Purchases &lt;/th&gt;&lt;th&gt; Visits &lt;/th&gt;&lt;th&gt; Purchase Rate&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt; Yesterday &lt;/td&gt;&lt;td&gt; 20 &lt;/td&gt;&lt;td&gt; 80 &lt;/td&gt;&lt;td&gt; 25% &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt; Today &lt;/td&gt;&lt;td&gt; 15 &lt;/td&gt;&lt;td&gt; 30 &lt;/td&gt;&lt;td&gt; 50% &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Sure your purchase rate increased, but you made fewer sales overall.
Damn the denominator!&lt;/p&gt;
&lt;p&gt;"Be skeptical of ratios" is pretty good advice -
at least make sure you understand how the denominator moves.&lt;/p&gt;
&lt;h1 id="its-still-useful"&gt;It's still useful&lt;/h1&gt;
&lt;p&gt;Some folks take this skepticism of ratios to an extreme
and say you shouldn't use ratios when reporting data.
&lt;strong&gt;That's a mistake&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You shouldn't make your reader work harder than they need to.
A ratio is often the easiest way to describe what's happening in the data.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You&lt;/em&gt; have a responsibility to make sure the data aren't misleading,
but hopefully your reader trusts you to guide them to the right conclusion.
This is &lt;strong&gt;critical to good data storytelling&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Relative humidity wasn't useful for understanding &lt;em&gt;why&lt;/em&gt; my house was dry.
It &lt;em&gt;is&lt;/em&gt; useful for measuring how dry the air feels.
It would be maddening to report absolute humidity 
next to a saturation vapor pressure table instead.&lt;/p&gt;
&lt;!--
When reporting data it's best to make the ratio, numerator, and denominator all available separately.

So like, as a metric, 
relative humidity is not very useful for figuring out why my house is so dry.

My gut reaction is to say it's a stupid metric.
Report absolute humidity instead.
Then we have a constant denominator.

"Don't use ratios" is pretty common advice for data work.
Being skeptical of ratios is data intuition 101.


----

I tried cycling the air in the house - 
opening windows and doors to let some of the humid outdoor air inside.
That didn't seem to improve the humidity at all

--&gt;</content><category term="2024"></category></entry><entry><title>A webring</title><link href="https://blog.harterrt.com/data-webring.html" rel="alternate"></link><published>2024-10-14T15:20:00-07:00</published><updated>2024-10-14T15:20:00-07:00</updated><author><name>Ryan T. Harter</name></author><id>tag:blog.harterrt.com,2024-10-14:/data-webring.html</id><summary type="html">&lt;p&gt;I added this blog to Randy Au's &lt;a href="https://www.counting-stuff.com/its-2024-lets-have-a-webring/"&gt;webring for data writers&lt;/a&gt;.
Take a &lt;a href="/pages/webring.html"&gt;look here&lt;/a&gt;, or below:&lt;/p&gt;
&lt;hr&gt;
&lt;div id='data-ring-dot-list'&gt;
&lt;link rel="stylesheet" href="https://randyau.github.io/datawebring/onionring.css"&gt;
&lt;script type="text/javascript" src="https://randyau.github.io/datawebring/onionring-variables.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://randyau.github.io/datawebring/onionring-widget.js"&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;I'm struggling to describe why I think this is so interesting.&lt;/p&gt;
&lt;p&gt;Most of the writing I've seen about doing data work is misleading.
It misrepresents what data work actually looks like.&lt;/p&gt;
&lt;p&gt;Everyone writing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I added this blog to Randy Au's &lt;a href="https://www.counting-stuff.com/its-2024-lets-have-a-webring/"&gt;webring for data writers&lt;/a&gt;.
Take a &lt;a href="/pages/webring.html"&gt;look here&lt;/a&gt;, or below:&lt;/p&gt;
&lt;hr&gt;
&lt;div id='data-ring-dot-list'&gt;
&lt;link rel="stylesheet" href="https://randyau.github.io/datawebring/onionring.css"&gt;
&lt;script type="text/javascript" src="https://randyau.github.io/datawebring/onionring-variables.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://randyau.github.io/datawebring/onionring-widget.js"&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;I'm struggling to describe why I think this is so interesting.&lt;/p&gt;
&lt;p&gt;Most of the writing I've seen about doing data work is misleading.
It misrepresents what data work actually looks like.&lt;/p&gt;
&lt;p&gt;Everyone writing online wants someone to read their work.
Social media give powerful hits of attention when they favor your work.
It's easy and natural to start writing for an algorithm.&lt;/p&gt;
&lt;p&gt;But that produces a very particular type of writing.
Folks rehash the same threadbare topics - 
responding to what novice readers &lt;em&gt;think&lt;/em&gt; they need to know
(should I learn python or R in 2024?).
Folks write hyper-technical or academic content because it's prestigious,
it's concrete, and our employers are less likely to care that we're sharing it.
Now, LLMs are churning out surface-level content too.&lt;/p&gt;
&lt;p&gt;In all, there's a distorted image of what good data work looks like.
That image is so strong that it actually changes the reality of data work.
Hiring managers start to require skills that they &lt;em&gt;think&lt;/em&gt; should be common.
Executives start to expect magic ML solutions from small data teams.
Novice data scientists train for hyper-technical (but fictitious) jobs.
This backwards pattern was stronger five years ago, but it's still around now.&lt;/p&gt;
&lt;p&gt;Instead, what I want to find is a few authors I trust
to discuss the realities of doing data work.
Randy does a great job here.
I've enjoyed reading a couple of blogs from his webring too.&lt;/p&gt;
&lt;p&gt;I don't know that webrings are the cure,
but a different set of incentives are welcome.&lt;/p&gt;</content><category term="2024"></category></entry><entry><title>SQL style - where do the commas go?</title><link href="https://blog.harterrt.com/commas-sql-style.html" rel="alternate"></link><published>2024-06-05T20:45:00-07:00</published><updated>2024-06-05T20:45:00-07:00</updated><author><name>Ryan T. Harter</name></author><id>tag:blog.harterrt.com,2024-06-05:/commas-sql-style.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; there are good arguments for leading commas,
but I recommend using trailing commas for consistency.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We didn't take an opinionated stance on comma placement when writing
&lt;a href="https://docs.telemetry.mozilla.org/concepts/sql_style.html"&gt;Mozilla's SQL Style Guide&lt;/a&gt;
probably to avoid a quagmire.
I'm trying to figure out where I stand now, so I wrote it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; there are good arguments for leading commas,
but I recommend using trailing commas for consistency.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We didn't take an opinionated stance on comma placement when writing
&lt;a href="https://docs.telemetry.mozilla.org/concepts/sql_style.html"&gt;Mozilla's SQL Style Guide&lt;/a&gt;
probably to avoid a quagmire.
I'm trying to figure out where I stand now, so I wrote it out here.&lt;/p&gt;
&lt;p&gt;Here's an example query so we can talk concretely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This query uses &lt;strong&gt;trailing commas&lt;/strong&gt; -
where there's a comma, it's the last character on the line.
This is by far the most common style of writing queries.&lt;/p&gt;
&lt;p&gt;On the other side, there are folks that prefer &lt;strong&gt;leading commas&lt;/strong&gt;, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column_c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a less common style, but is fervently loved by its proponents.
Leading comma proponents will argue that this style is easier to work with
and makes git commits more readable.&lt;/p&gt;
&lt;p&gt;Similarly, there are fervent proponents of trailing commas.
They'll argue that trailing commas are convention by overwhelming majority
and leading commas are jarringly ugly.&lt;/p&gt;
&lt;p&gt;In reality, most analysts don't care either way.
They tend to use trailing commas by default.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.youtube.com/watch?v=SsoOG6ZeyUI"&gt;spaces-vs-tabs&lt;/a&gt;
absurdity of this argument is not lost on me.
But, I &lt;em&gt;do&lt;/em&gt; care about SQL style, so here I am.&lt;/p&gt;
&lt;h2 id="consistency-is-paramount"&gt;Consistency is paramount&lt;/h2&gt;
&lt;p&gt;Like &lt;a href="https://peps.python.org/pep-0008/"&gt;PEP8&lt;/a&gt;, 
&lt;a href="https://docs.telemetry.mozilla.org/concepts/sql_style.html"&gt;Mozilla's SQL Style Guide&lt;/a&gt;
aims to make queries 
consistent in service of readability.&lt;/p&gt;
&lt;p&gt;Trailing commas are by far the most common pattern.
For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.telemetry.mozilla.org/concepts/sql_style.html"&gt;Mozilla's Style Guide&lt;/a&gt;
  uniformly uses trailing commas in examples
  despite not making an explicit recommendation on comma format.&lt;/li&gt;
&lt;li&gt;BigQuery's documentation uses trailing commas 
  (&lt;a href="https://cloud.google.com/bigquery/docs/running-queries"&gt;e.g.&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Simon Holywell's SQL Style Guide (&lt;a href="https://www.sqlstyle.guide/"&gt;sqlstyle.guide&lt;/a&gt;)
  uniformly uses trailing commas&lt;/li&gt;
&lt;li&gt;SQLFluff's &lt;a href="https://docs.sqlfluff.com/en/stable/rules.html#rule-layout.commas"&gt;&lt;code&gt;Rule_L019&lt;/code&gt;&lt;/a&gt;
  defaults to trailing commas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But the most convincing source I found is Ben Stancil's 
&lt;a href="https://mode.com/blog/should-sql-queries-use-trailing-or-leading-commas"&gt;analysis of queries in Mode&lt;/a&gt;. 
He found that ~80% of sufficiently-complex queries use trailing commas.
Only ~15% of query authors frequently use leading commas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trailing commas are clearly the dominant convention&lt;/strong&gt;.
Style guides are about consistency.
This is enough evidence for me to recommend trailing commas
as the right default.&lt;/p&gt;
&lt;p&gt;That said, there &lt;em&gt;are&lt;/em&gt; some motivating reasons to use leading commas.&lt;/p&gt;
&lt;h2 id="ergonomics"&gt;Ergonomics&lt;/h2&gt;
&lt;p&gt;The most common argument I see for leading commas is that 
it's easier to edit queries - especially when prototyping an analysis.&lt;/p&gt;
&lt;p&gt;Until recently, the following SQL would produce an error in most SQL engines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- column_c&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That &lt;strong&gt;hanging comma&lt;/strong&gt; after &lt;code&gt;column_b&lt;/code&gt; is invalid.&lt;/p&gt;
&lt;p&gt;This can be very annoying when hacking on a query.
Commenting out a column creates an error. Yuck.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I suspect this is why folks started using leading commas in the first place&lt;/strong&gt;.
We can just comment out the line if we're using leading commas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- , column_c -- this line in commented out&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is nice, but in practice,
many modern SQL engines have stopped throwing this error.&lt;/p&gt;
&lt;p&gt;We owe a debt of gratitude to &lt;a href="https://duckdb.org/"&gt;DuckDB&lt;/a&gt;
for pushing the industry forward here.
Their &lt;a href="https://duckdb.org/2022/05/04/friendlier-sql.html"&gt;Friendly SQL&lt;/a&gt;
created some great quality-of-life improvements
that are quickly being adopted by competitors.
BigQuery, for example.&lt;/p&gt;
&lt;p&gt;Unfortunately, the progress is incomplete.
Most query engines, like Presto or SQLite,
will still throw hanging comma errors.&lt;/p&gt;
&lt;p&gt;Even more frustrating, 
this isn't consistently enforced even &lt;em&gt;within&lt;/em&gt; a single query.
Take this failing BigQuery query for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- valid hanging comma&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;third&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- invalid hanging comma, causes an error&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;SQLFluff addresses this pattern in their rule CV03, 
&lt;a href="https://docs.sqlfluff.com/en/stable/rules.html#trailing-commas-within-select-clause"&gt;Trailing commas within select clause&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In their own works:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For many database backends this is allowed. For some users this may be
something they wish to enforce (in line with Python best practice). Many
database backends regard this as a syntax error, and as such the SQLFluff
default is to forbid trailing commas in the select clause.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I agree with the default of forbidding trailing commas.
I'll take it a step further:
allowing trailing commas 
&lt;strong&gt;creates inconsistency within a query and should be forbidden&lt;/strong&gt;,
even where the query engine allows it.&lt;/p&gt;
&lt;p&gt;It's fine to use leading commas or hanging commas
while hacking on an ad hoc query. They're convenient. I use them too.
But these conveniences should be cleaned up 
before committing the query to a code base.&lt;/p&gt;
&lt;h2 id="cleaner-git-commit-messages"&gt;Cleaner git commit messages&lt;/h2&gt;
&lt;p&gt;A corollary to the above argument 
is that leading commas create cleaner commit messages.&lt;/p&gt;
&lt;p&gt;We need to touch two lines to delete a column using leading commas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- remove a comma from this line&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- column_c -- delete this line&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can contain our changes to one line if we use leading commas&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- , column_c -- only need to delete this line&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I &lt;em&gt;guess&lt;/em&gt; this is a benefit, but I don't find it motivating.&lt;/p&gt;
&lt;p&gt;Style guides exist because code is read far more often than it's written.
A commit message is read less frequently than the code -
probably by an order of magnitude.&lt;/p&gt;
&lt;p&gt;Making a trivial improvement to the git diff 
is not worth breaking convention.&lt;/p&gt;
&lt;h2 id="commas-are-load-bearing"&gt;Commas are load bearing&lt;/h2&gt;
&lt;p&gt;The best argument I've seen is that 
commas kinda look like keywords if you squint hard enough.
We &lt;em&gt;do&lt;/em&gt; require keywords to be at the beginning of the line.
We &lt;em&gt;also&lt;/em&gt; require Boolean operators to be at the beginning of a line.&lt;/p&gt;
&lt;p&gt;For example, if commas &lt;em&gt;were&lt;/em&gt; keywords 
it would be obvious that they should be at the beginning of the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;COMMA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;COMMA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column_c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The consistency win becomes even more clear if we add a join 
and some Boolean operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;COMMA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;COMMA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column_c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;LEFT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;USING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;joint_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;column_b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column_c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bbb&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commas are load bearing.
They carry meaning but are easily missed at the end of a line.&lt;/p&gt;
&lt;p&gt;This is pretty esoteric though. 
Also, commas are not actually keywords, soooo...&lt;/p&gt;
&lt;h2 id="spotting-errors"&gt;Spotting errors&lt;/h2&gt;
&lt;p&gt;Another reasonable argument for leading commas 
is that it makes it easier to spot a particular type of error.&lt;/p&gt;
&lt;p&gt;Take this query for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;first_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;second_column&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;another_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;final_column&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks like the resulting table will have four columns,
but in reality it will only have three columns.&lt;/p&gt;
&lt;p&gt;There's a missing comma after &lt;code&gt;column_b&lt;/code&gt;.
Most SQL interpreters will interpret this query to mean:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;first_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;second_column&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;another_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;final_column&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The error is more obvious if we use leading commas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;first_column&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;second_column&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;another_column&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final_column&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The solution to this problem is fairly simple: Use a code linter and formatter.
Probably &lt;a href="https://sqlfluff.com/"&gt;SQLFluff&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The linter will make the error even &lt;em&gt;more&lt;/em&gt; obvious than leading commas would:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;first_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;second_column&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;another_column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;final_column&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;table_a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There &lt;em&gt;are&lt;/em&gt; good arguments for using leading commas.
If I were coding in a vacuum,
I might recommending standardizing around leading commas.&lt;/p&gt;
&lt;p&gt;However, that's not the case.
Trailing commas are the dominant convention by a long shot.
The battle is lost.&lt;/p&gt;
&lt;p&gt;Use trailing commas.&lt;/p&gt;</content><category term="2024"></category></entry><entry><title>Talk: Practical Strategies for Data Storytelling</title><link href="https://blog.harterrt.com/storytelling-odsc-2024.html" rel="alternate"></link><published>2024-06-05T00:00:00-07:00</published><updated>2024-06-05T00:00:00-07:00</updated><author><name>Ryan T. Harter</name></author><id>tag:blog.harterrt.com,2024-06-05:/storytelling-odsc-2024.html</id><summary type="html">&lt;p&gt;I gave a talk at the Open Data Science Conference a few weeks ago titled: 
&lt;a href="https://odsc.com/speakers/practical-strategies-for-data-storytelling/"&gt;Practical Strategies for Data Storytelling&lt;/a&gt;.
I have more to say on the subject, but in the meantime you can see my 
&lt;a href="/static/odsc2024/index.html#p1"&gt;slides and speaker notes here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For the last two years, I've hosted a biweekly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I gave a talk at the Open Data Science Conference a few weeks ago titled: 
&lt;a href="https://odsc.com/speakers/practical-strategies-for-data-storytelling/"&gt;Practical Strategies for Data Storytelling&lt;/a&gt;.
I have more to say on the subject, but in the meantime you can see my 
&lt;a href="/static/odsc2024/index.html#p1"&gt;slides and speaker notes here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For the last two years, I've hosted a biweekly data storytelling workshop
for my peers at Shopify.
This talk is an attempt to share some of my experience more broadly.&lt;/p&gt;
&lt;!-- Maybe include the slide and intro blurb here instead --&gt;

&lt;p&gt;I was surprised by the turnout we had -
a lot of data folks want to improve their storytelling.
A lot of these folks also don't know where to start.&lt;/p&gt;
&lt;p&gt;That's not surprising.
Storytelling is the vaguest part of most data science job ladders.
Many of the folks trying to improve their storytelling
don't know what data storytelling &lt;em&gt;is&lt;/em&gt;.
No wonder it's so hard to improve.&lt;/p&gt;
&lt;p&gt;The other big problem I see 
is that folks don't know how to start their storytelling &lt;em&gt;practice&lt;/em&gt;.
They know they want to improve - 
but at a very tactical level, they don't know what exercises to do.&lt;/p&gt;
&lt;p&gt;I try to address both of these in my talk.&lt;/p&gt;
&lt;p&gt;I have a lot more to say, but I don't have time right now.
The internet is littered with promises of another essay coming soon.
I won't make any promises here.
Fingers crossed - I hope to expand on this talk soon.&lt;/p&gt;
&lt;!--
----

## Appendix





When folks get stuck trying to improve their data storytelling, 
there's usually two problems:

1. They don't know what data storytelling _is_,
   though they usually have some idea about why it's important
2. They don't know how to jump start their storytelling practice. 
   They don't have a useful feedback loop.






It's not hard to imagine. 
There's not a ton of writing on _how_ to do good data storytelling.
"Storytelling with data" is a good start, but over indexes on making graphics.
Graphs are only a small part of telling a good story.



----

and doesn't do much to explain what storytelling _is_. 

This can be very frustrating.

More often than not, 
when someone is told they need to improve their storytelling
they don't really know what good storytelling _is_.

Usually, when someone is struggling with storytelling
it's because they don't know what good storytelling _is_.

Folks usually get stuck for one of a few reasons:

* They don't understand what data storytelling _is_
* They don't feel comfortable being opinionated
* They don't understand their audience

One problem is that folks don't know what good storytelling _is_.

Most of the time, the issue is that it's not clear what good storytelling _is_.

but don't know how to get started.

Often the problem is that they don't know what good storytelling looks like.
They only know that they need to improve.

Part of the problem is that there's no good 

We had a great turnout for this talk.
Unfortunately some attendees couldn't attend due to seating capacity.
I wish the talk had been recorded.

I've found that lots of data folks want to improve their storytelling,
but they don't know how to get started.

Most of the time, the blocker is that they don't understand 
what good data storytelling _is_.

Most importantly, a lot of folks are confused about what good storytelling _is_.

We're not doing ourselves any favors with the mysticism around storytelling.

The first is that data storytelling is poorly understood.

---

This talk came because it's necessary.

Standing room only. Lots of interest.

Most vague part of a job ladder.

This talk came out of _practice_.
I've hosted a data storytelling workshop at Shopify for the last two years.

I've hosted a fortnightly workshop on data storytelling at Shopify for the last two years.

--&gt;</content><category term="2024"></category></entry><entry><title>Getting Credit for Invisible Work</title><link href="https://blog.harterrt.com/getting-credit-for-invisible-work.html" rel="alternate"></link><published>2022-07-01T00:00:00-07:00</published><updated>2022-07-01T00:00:00-07:00</updated><author><name>Ryan T. Harter</name></author><id>tag:blog.harterrt.com,2022-07-01:/getting-credit-for-invisible-work.html</id><summary type="html">&lt;p&gt;As I moved up my company’s career ladder,
my job description became more ambiguous.&lt;/p&gt;
&lt;p&gt;I stepped back to take a look at my work, and I was surprised to find that my
biggest wins hadn’t come from technical feats or shipped code. Instead, I
realized that most of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I moved up my company’s career ladder,
my job description became more ambiguous.&lt;/p&gt;
&lt;p&gt;I stepped back to take a look at my work, and I was surprised to find that my
biggest wins hadn’t come from technical feats or shipped code. Instead, I
realized that most of my success could be attributed to more subtle decisions
that were never shared with my stakeholders.&lt;/p&gt;
&lt;p&gt;This work was hard to sell to my management chain and largely went
unrecognized. Fortunately, a few close colleagues noticed that projects went
more smoothly when I was onboard.&lt;/p&gt;
&lt;p&gt;It’s easy to get recognition for fighting fires, but it’s hard to get
recognized for &lt;em&gt;preventing&lt;/em&gt; fires.&lt;/p&gt;
&lt;p&gt;This article covers some strategies for making these Staff+ superpowers
understandable to the company, both so we can get rewarded for this work and
demystify some of what reaching Staff+ level looks like.&lt;/p&gt;
&lt;h2 id="what-is-invisible-work"&gt;What is invisible work?&lt;/h2&gt;
&lt;p&gt;To start, I’ll define invisible work to make sure we’re all on the same page.
Invisible work is work that is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Critical to your success&lt;/li&gt;
&lt;li&gt;Takes skill to do well&lt;/li&gt;
&lt;li&gt;Is never shown to stakeholders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My background is in data science. I can confidently say that almost all of my
work is invisible. Good analysis is a process of 
developing hypotheses &lt;em&gt;and then discarding them&lt;/em&gt;.
My client only sees my final product, polished up and ready
for the showroom. I never show the pile of cracked and discarded hypotheses
hidden in my workshop.&lt;/p&gt;
&lt;p&gt;This is a good thing! I dig into a problem, understand it deeply, then simplify
my understanding for my peers. If I’m doing my job well, I’m making it look
easy. This can cause problems when going for promotion though.&lt;/p&gt;
&lt;p&gt;Invisible work is by no means limited to data work. I’ve saved the company
months of effort by taking an afternoon to sit on my couch and carefully write
a project spec – only to decide the project isn’t worth pursuing after all.
This is a triumph even if it doesn’t lead to an exciting launch.&lt;/p&gt;
&lt;p&gt;In 
&lt;em&gt;The Mythical Man-Month&lt;/em&gt; , Fred Brooks tells us to plan on 
&lt;a href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month#The_pilot_system"&gt;throwing one away&lt;/a&gt;.
This sacrificial prototype is important (but invisible) work.&lt;/p&gt;
&lt;p&gt;This article is no exception. There are at least two drafts that will
(thankfully) never see the light of day. I’ve also had countless conversations
with mentors and peers to help develop the idea of invisible work. This
pre-work is critical and underappreciated.&lt;/p&gt;
&lt;h2 id="whys-that-a-problem"&gt;Why’s that a problem?&lt;/h2&gt;
&lt;p&gt;At one of my previous gigs, I got a performance review that effectively said,
‘We want to see you demonstrate more complexity in your work.’&lt;/p&gt;
&lt;p&gt;On the surface that might sound fine, but this thinking is backward and too
common in the industry. Really, what we should want are 
&lt;em&gt;simple solutions to complex problems&lt;/em&gt;.
The complexity of our work is a cost to bear, not something to maximize!&lt;/p&gt;
&lt;p&gt;I’ve seen this type of pro-complexity thinking cause all sorts of dysfunctions.
I’ve seen folks slip machine learning into places it doesn’t belong to get a
flashy launch. Occasionally folks build long-winded and boring reports
documenting every possible bit of complexity to prove how hard the problem was.&lt;/p&gt;
&lt;p&gt;In both of these cases, we’re incentivizing complexity. In the end, you’re
going to get more of what you incentivize.&lt;/p&gt;
&lt;h2 id="telling-a-good-story"&gt;Telling a good story&lt;/h2&gt;
&lt;p&gt;Deep down, most people feel like my job is cranking out technical code. I’m
guilty of this myself. When I have my hands on a keyboard it &lt;em&gt;feels&lt;/em&gt; like work.
It’s reassuring.&lt;/p&gt;
&lt;p&gt;In reality though, a lot of the work that’s critical to my success no longer
matches that description. This became even &lt;em&gt;more&lt;/em&gt; true as I moved up the IC
ladder. Now stuff like making sure I’m solving the &lt;em&gt;right problem&lt;/em&gt; is at the
core
of my work.&lt;/p&gt;
&lt;p&gt;I had to convince myself and others that the core of my work changed. I found
the best way to do that was by &lt;strong&gt;creating a clear and memorable story&lt;/strong&gt; about
what I do and why it’s hard. Once I understood this well, I was able to make
better decisions about my work and convince others that it was important.&lt;/p&gt;
&lt;p&gt;The key here was to &lt;strong&gt;focus on what was actually hard about my work&lt;/strong&gt;.
Sometimes it was a technical piece, but more often, it wasn’t. Was the hardest
part of your last project writing the code? Or was it framing the problem well,
getting buy-in, and getting a budget?&lt;/p&gt;
&lt;p&gt;Once you have a story, &lt;strong&gt;focus on what outcomes you created&lt;/strong&gt;. Don’t focus on
the code you pumped out or the report you wrote. Focus on how your work changed
the company. Maybe you found a team that was angry and stressed - but then you
jumped in, gave direction, and left that team feeling happy and relieved.
That’s awesome! You should do more of that!&lt;/p&gt;
&lt;p&gt;I have three practical tips to help you build this story:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fight recency bias with snippets&lt;/li&gt;
&lt;li&gt;Keep a brag doc&lt;/li&gt;
&lt;li&gt;Practice your story until it’s smooth&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fight-recency-bias-with-snippets"&gt;Fight recency bias (with snippets)&lt;/h2&gt;
&lt;p&gt;Snippets are a habit I picked up at Google. The key here is to make a habit of
summarizing your work at regular intervals. I do this every other week but some
prefer to do it weekly.&lt;/p&gt;
&lt;p&gt;Snippets are a way to collect data on yourself. Try to be specific. Include
links to artifacts if you can. Try to document where you’re spending your time
and energy, not just the stuff that’s obviously work.&lt;/p&gt;
&lt;p&gt;I find that once a problem is well-framed, there’s usually an obvious solution.
The hard part is getting to a well-framed problem. &lt;/p&gt;
&lt;p&gt;However, when I look back on my work I only see the solution I came up with,
not the work that went into framing the problem well. Snippets make it easy to
remember where the hard and important work actually happened.&lt;/p&gt;
&lt;h2 id="keep-a-brag-document"&gt;Keep a brag document&lt;/h2&gt;
&lt;p&gt;This is common advice – but that’s because it’s useful!&lt;/p&gt;
&lt;p&gt;I keep a list of my professional successes in a Google Doc. Every time I’m
excited about a project going well, I try to make a quick note of it.&lt;/p&gt;
&lt;p&gt;This is a nice ego boost, but it’s useful too. This excitement fades quickly
and it becomes hard to remember what I was excited about even a month later.
When I look at my brag doc it serves as an index to my weekly snippets, showing
me where to look for important work. Plus it’s a nice dopamine hit.&lt;/p&gt;
&lt;h2 id="work-the-story-until-its-smooth"&gt;Work the story until it’s smooth&lt;/h2&gt;
&lt;p&gt;The first time you try telling your story, it’s going to be clunky. The only
way to get past this is practice. Work your story over until it’s smooth. In
the ideal case, you want this story to be able to spread by word of mouth.&lt;/p&gt;
&lt;p&gt;I like practicing my story in my 1:1s. Usually someone asks me what I’ve been
up to. This is a great chance to share what you think was &lt;em&gt;actually difficult&lt;/em&gt;
about your work this week. Replacing the usual small talk with commentary on my
invisible work has sparked some great conversations with my coworkers. Pretty
often there’s a flash of recognition where they realize that – yeah, that &lt;em&gt;is&lt;/em&gt;
really hard!&lt;/p&gt;
&lt;p&gt;You’ll want to share your story with your manager too. Your manager is
eventually going to be in a room with their peers arguing for why you need a
promotion. If you’ve armed your manager with a great story about why your work
is hard, they’re going to be grateful to you for making them look smart.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;P.S.:
I originally wrote this article for
&lt;a href="https://leaddev.com/staffplus/getting-credit-invisible-work-staff-level"&gt;StaffPlus&lt;/a&gt;
and I'm just now getting around to sharing it here.&lt;/p&gt;
&lt;p&gt;P.P.S.:
Tanya Reilly quoted this piece in "The Staff Engineer's Path" 🎉&lt;/p&gt;</content><category term="2024"></category></entry></feed>